import fetchToppingsAPI from '../../utils/fetchToppingsAPI'
import { createMetadataSection, createSectionItem } from 'blendora'
import { formatRuntime } from '../../../../utils/formatRuntime'

interface PlaylistInfo {
  data: {
    avg_runtime : string
    num_videos: string
    playlist_id: string
    total_runtime: {
      hours: number 
      minutes: number
      seconds: number
    }
  }
  description: string
  message: string

  }

const addPlaylistRuntime = async (playlistID: string): Promise<void> => {
  const metadataActionBar = document.querySelector('.metadata-action-bar') as HTMLDivElement
  let MetadataToppings = document.querySelector('#toppings__metadata-toppings') as HTMLDivElement
  if (MetadataToppings === null) {
    if (playlistID === 'WL' || playlistID === 'LL') {
      return
    }
    MetadataToppings = document.createElement('div')
    MetadataToppings.className =
        'metadata-text-wrapper style-scope ytd-playlist-header-renderer'
    MetadataToppings.id = 'toppings__metadata-toppings'

    const ToppingsHeader = document.createElement('div')
    ToppingsHeader.id = 'toppings__toppings-header'

    const ToppingsIcon = document.createElement('img')
    ToppingsIcon.src = chrome.runtime.getURL('assets/icons/icon128.png')
    ToppingsIcon.id = 'toppings__toppings-icon'

    const ToppingsHeading = document.createElement('h2')
    ToppingsHeading.id = 'toppings__toppings-heading'
    ToppingsHeading.textContent = 'Toppings'

    ToppingsHeader.append(ToppingsIcon, ToppingsHeading)
    MetadataToppings.appendChild(ToppingsHeader)
    MetadataToppings.append(await addRuntimeSection(playlistID))

    if (metadataActionBar.lastChild !== null) {
      metadataActionBar.insertBefore(
        MetadataToppings,
        metadataActionBar.lastChild.previousSibling
      )
    }
  } else {
    if (playlistID === 'WL' || playlistID === 'LL') {
      MetadataToppings.remove()
    } else {
      await fetchToppingsAPI({
        appName: 'youtube',
        body: {
          routeType: 'playlist',
          routeID: playlistID,
          routeAction: 'getPlaylistInfo'
        }
      }).then((res: PlaylistInfo) => {
        if (res.status === 200) {
          const runtimeSection = document.querySelector('#toppings__runtime-section') as HTMLDivElement
          if (runtimeSection !== null) {
            runtimeSection.remove()
          }
          MetadataToppings.append(addRuntimeSection(playlistID))
        }
      })
    }
  }
